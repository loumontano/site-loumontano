{
  "name": "gulp-ruby-sass",
  "version": "2.0.1",
  "description": "Compile Sass to CSS with Ruby Sass",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/gulp-ruby-sass"
  },
  "maintainers": [
    {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    {
      "name": "Rob Wierzbowski",
      "email": "robwierzbowski@gmail.com",
      "url": "robwierzbowski.com"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "xo && cd test && mocha test.js"
  },
  "files": [
    "index.js",
    "logger.js",
    "utils.js"
  ],
  "keywords": [
    "gulpplugin",
    "scss",
    "sass",
    "css",
    "compile",
    "preprocessor",
    "style",
    "ruby",
    "source-map",
    "source-maps",
    "sourcemap",
    "sourcemaps"
  ],
  "dependencies": {
    "convert-source-map": "^1.0.0",
    "cross-spawn-async": "^2.0.0",
    "dargs": "^2.0.3",
    "each-async": "^1.0.0",
    "glob": "^5.0.5",
    "glob2base": "0.0.12",
    "gulp-util": "^3.0.4",
    "md5-hex": "^1.0.2",
    "object-assign": "^4.0.1",
    "os-tmpdir": "^1.0.0",
    "path-exists": "^2.0.0",
    "rimraf": "^2.2.8",
    "vinyl-fs": "^1.0.0"
  },
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-sourcemaps": "^1.2.7",
    "mocha": "*",
    "vinyl-file": "^1.2.1",
    "xo": "*"
  },
  "readme": "# gulp-ruby-sass [![Build Status](https://travis-ci.org/sindresorhus/gulp-ruby-sass.svg?branch=master)](https://travis-ci.org/sindresorhus/gulp-ruby-sass)\n\nCompiles Sass with the [Sass gem](http://sass-lang.com/install) and pipes the results into a gulp stream.  \nTo compile Sass with [libsass](http://libsass.org/), use [gulp-sass](https://github.com/dlmanning/gulp-sass)\n\n## Install\n\n```\n$ npm install --save-dev gulp-ruby-sass\n```\n\nRequires [Sass >=3.4](http://sass-lang.com/install).\n\n## Usage\n\n### sass(source, options)\n\nUse gulp-ruby-sass *instead of `gulp.src`* to compile Sass files.\n\n```js\nvar gulp = require('gulp');\nvar sass = require('gulp-ruby-sass');\n\ngulp.task('sass', function () {\n  return sass('source/file.scss')\n    .on('error', sass.logError)\n    .pipe(gulp.dest('result'));\n});\n```\n\n#### source\n\nType: `String` or `Array`\n\nA file or glob pattern (`source/**/*.scss`) to compile. Ignores files prefixed with an underscore. Directory sources are not supported.\n\n#### options\n\nType: `Object`\n\nAn object containing plugin and Sass options. Available options include:\n\n##### bundleExec\n\nType: `Boolean`  \nDefault: `false`\n\nRun Sass with [bundle exec](http://gembundler.com/man/bundle-exec.1.html).\n\n##### sourcemap\n\nType: `Boolean`  \nDefault: `false`\n\nInitialize and pass Sass sourcemaps to [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps). Note this option replaces Sass's `sourcemap` option.\n\n```js\nvar gulp = require('gulp');\nvar sass = require('gulp-ruby-sass');\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('sass', function () {\n  return sass('source/file.scss', { sourcemap: true })\n    .on('error', sass.logError)\n\n    // For inline sourcemaps\n    .pipe(sourcemaps.write())\n\n    // For file sourcemaps\n    .pipe(sourcemaps.write('maps', {\n      includeContent: false,\n      sourceRoot: 'source'\n    }))\n\n    .pipe(gulp.dest('result'));\n});\n```\n\n##### base\n\nType: `String`\n\nIdentical to `gulp.src`'s [`base` option](https://github.com/gulpjs/gulp/blob/master/docs/API.md#optionsbase).\n\n##### tempDir\n\nType: `String`  \nDefault: the system temp directory as reported by [os-tempDir](https://github.com/sindresorhus/os-tmpdir)\n\nThis plugin compiles Sass files to a temporary directory before pushing them through the stream. Use `tempDir` to choose an alternate directory if you aren't able to use the default OS temporary directory.\n\n##### emitCompileError\n\nType: `Boolean`  \nDefault: `false`\n\nEmit a gulp error when Sass compilation fails.\n\n##### verbose\n\nType: `Boolean`  \nDefault: `false`\n\nLog the spawned Sass or Bundler command. Useful for debugging.\n\n##### Sass options\n\nAny additional options are passed directly to the Sass executable. The options are camelCase versions of Sass's options parsed by [dargs](https://github.com/sindresorhus/dargs).\n\nRun `sass -h` for a complete list of Sass options.\n\n```js\ngulp.task('sass', function () {\n  return sass('source/file.scss', {\n      precision: 6,\n      stopOnError: true,\n      cacheLocation: './',\n      loadPath: [ 'library', '../../shared-components' ]\n    })\n    .on('error', sass.logError)\n    .pipe(gulp.dest('result'));\n});\n```\n\n### sass.logError(err)\n\nA convenience function for pretty error logging.\n\n### sass.clearCache([tempDir])\n\nIn rare cases you may need to clear gulp-ruby-sass's cache. This sync function deletes all files used for Sass caching. If you've set a custom temporary directory in your task you must pass it to `clearCache`.\n\n## Issues\n\nThis plugin wraps the Sass gem for the gulp build system. It does not alter Sass's output in any way. Any issues with Sass output should be reported to the [Sass issue tracker](https://github.com/sass/sass/issues).\n\nBefore submitting an issue please read the [contributing guidelines](https://github.com/sindresorhus/gulp-ruby-sass/blob/master/contributing.md).\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sindresorhus/gulp-ruby-sass/issues"
  },
  "homepage": "https://github.com/sindresorhus/gulp-ruby-sass",
  "_id": "gulp-ruby-sass@2.0.1",
  "_from": "gulp-ruby-sass@"
}
